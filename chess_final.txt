#include<stdio.h>

    char array[64][2];
    char array_pointer = 0;
    char array_last = 0;
    char chessBoard[9][9];
    
    int is_exists(int x,int y)
    {
        int i;
        for(i = 0; i < array_last; i++)
        {
            if(array[i][0] == x && array[i][1] == y)
            return 1;
        }
        return 0;
    }
    
    int min(int x, int y)
    {
        if(x<y)
            return x;
        return y;
    }
    
    
    
    void findMoveCount(int knight_x,int knight_y)
    {
        int x_pos, y_pos;
        int moveCount;
        int is_exist_flag;

        array[0][1] = knight_y;
        array[0][0] = knight_x;
        array_pointer = 0;
        array_last = 1;
        chessBoard[knight_x][knight_y] = 0;
        
		int i,j;
        for(array_pointer = 0; array_pointer < 64; array_pointer++)
        {
            knight_x = array[array_pointer][0];
            knight_y = array[array_pointer][1];
            moveCount = chessBoard[knight_x][knight_y] + 1;
            
            //move 1 : (X-2) (Y+1)
            x_pos = (knight_x - 2);
            y_pos = (knight_y + 1);
            if(x_pos > 0 && 
                x_pos < 9 &&
                y_pos > 0 &&
                y_pos < 9)
                {
                    chessBoard[x_pos][y_pos] = min(moveCount, chessBoard[x_pos][y_pos]);
                    is_exist_flag = is_exists(x_pos, y_pos);
                    if(is_exist_flag == 0)
                    {
                        array[array_last][0] = x_pos;
                        array[array_last][1] = y_pos;
                        array_last++;
                    }
                    
                }
        
            //move 2 : (X-1) (Y+2)
            x_pos = (knight_x - 1);
            y_pos = (knight_y + 2);
            if(x_pos > 0 && 
                x_pos < 9 &&
                y_pos > 0 &&
                y_pos < 9)
                {
                    chessBoard[x_pos][y_pos] = min(moveCount, chessBoard[x_pos][y_pos]);
                    is_exist_flag = is_exists(x_pos, y_pos);
                    if(is_exist_flag == 0)
                    {
                        array[array_last][0] = x_pos;
                        array[array_last][1] = y_pos;
                        array_last++;
                    }
                }
            //move 3 : (X+1) (Y+2)
            x_pos = (knight_x + 1);
            y_pos = (knight_y + 2);
            if(x_pos > 0 && 
                x_pos < 9 &&
                y_pos > 0 &&
                y_pos < 9)
                {
                    chessBoard[x_pos][y_pos] = min(moveCount, chessBoard[x_pos][y_pos]);
                    is_exist_flag = is_exists(x_pos, y_pos);
                    if(is_exist_flag == 0)
                    {
                        array[array_last][0] = x_pos;
                        array[array_last][1] = y_pos;
                        array_last++;
                    }
                }
            //move 4 : (X+2) (Y+1)
            x_pos = (knight_x + 2);
            y_pos = (knight_y + 1);
            if(x_pos > 0 && 
                x_pos < 9 &&
                y_pos > 0 &&
                y_pos < 9)
                {
                    chessBoard[x_pos][y_pos] = min(moveCount, chessBoard[x_pos][y_pos]);
                    is_exist_flag = is_exists(x_pos, y_pos);
                    if(is_exist_flag == 0)
                    {
                        array[array_last][0] = x_pos;
                        array[array_last][1] = y_pos;
                        array_last++;
                    }
                    
                }
            //move 5 : (X+2) (Y-1)
            x_pos = (knight_x + 2);
            y_pos = (knight_y - 1);
            if(x_pos > 0 && 
                x_pos < 9 &&
                y_pos > 0 &&
                y_pos < 9)
                {
                    chessBoard[x_pos][y_pos] = min(moveCount, chessBoard[x_pos][y_pos]);
                    is_exist_flag = is_exists(x_pos, y_pos);
                    if(is_exist_flag == 0)
                    {
                        array[array_last][0] = x_pos;
                        array[array_last][1] = y_pos;
                        array_last++;
                    }
                }
            //move 6 : (X+1) (Y-2)
            x_pos = (knight_x + 1);
            y_pos = (knight_y - 2);
            if(x_pos > 0 && 
                x_pos < 9 &&
                y_pos > 0 &&
                y_pos < 9)
                {
                    chessBoard[x_pos][y_pos] = min(moveCount, chessBoard[x_pos][y_pos]);
                    is_exist_flag = is_exists(x_pos, y_pos);
                    if(is_exist_flag == 0)
                    {
                        array[array_last][0] = x_pos;
                        array[array_last][1] = y_pos;
                        array_last++;
                    }
                }
            //move 7 : (X-1) (Y-2)
            x_pos = (knight_x - 1);
            y_pos = (knight_y - 2);
            if(x_pos > 0 && 
                x_pos < 9 &&
                y_pos > 0 &&
                y_pos < 9)
                {
                    chessBoard[x_pos][y_pos] = min(moveCount, chessBoard[x_pos][y_pos]);
                    is_exist_flag = is_exists(x_pos, y_pos);
                    if(is_exist_flag == 0)
                    {
                        array[array_last][0] = x_pos;
                        array[array_last][1] = y_pos;
                        array_last++;
                    }
                }
            //move 8 : (X-2) (Y-1)
            x_pos = (knight_x - 2);
            y_pos = (knight_y - 1);
            if(x_pos > 0 && 
                x_pos < 9 &&
                y_pos > 0 &&
                y_pos < 9)
                {
                    chessBoard[x_pos][y_pos] = min(moveCount, chessBoard[x_pos][y_pos]);
                    is_exist_flag = is_exists(x_pos, y_pos);
                    if(is_exist_flag == 0)
                    {
                        array[array_last][0] = x_pos;
                        array[array_last][1] = y_pos;
                        array_last++;
                    }
            }
        }
        
    }
    
    int getStepCount(int knight_x,int knight_y,int king_x,int king_y)
    {
        int i,j;
        //char chessBoard[9][9];
        //printf("%d",knight_x);
        
        //printf("In getStepCount");
        chessBoard[knight_x][knight_y] = 0;
        for(i = 0; i < 9 ;i++)
        {
            for(j = 0; j< 9; j++)
            {
                chessBoard[i][j] = 100;
            }
        }
        findMoveCount(knight_x,knight_y);
        for(i = 0; i < 9;i++)
        {
        	printf("\n");
        	for(j = 0; j < 9; j++)
        	{
        		printf("%d ", chessBoard[i][j]);
        	}
        }
        return chessBoard[king_x][king_y];
        //return 0;
    }
int main()
{
	int output = 0;
	int ip1;
	scanf("%d",&ip1);
	int ip2;
	scanf("%d",&ip2);
	int ip3;
	scanf("%d",&ip3);
	int ip4;
	scanf("%d",&ip4);
	output = getStepCount(ip1,ip2,ip3,ip4);
	printf("%d\n",output);
	return 0;
}

